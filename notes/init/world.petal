var verbs = {
	$command: {
		code: function() {
			var text = $parse.text;
			if (text.startsWith('"'))
				text = "say " + text.substr(1);
			else if (text.startsWith(':'))
				text = "emote " + text.substr(1);
			if (text.startsWith("say ")) {
				text = text.substr("say ".length);
				$.log("Saying", text);
				this.$sayinto(caller.location, [$.notate(caller), "says,", text]);
				return true;
			} else if (text.startsWith("emote ")) {
				text = text.substr("emote ".length);
				$.log("Emoting", text);
				this.$sayinto(caller.location, [$.notate(caller), text]);
				return true;
			} else if (text.startsWith("create ")) {
				var name = text.substr("create ".length);
				var newWob = $.create(caller.location);
				newWob.name = name;
				$.log("Created", name, "(#" + newWob.id + ")");
				this.$sayinto(caller.location, ["Poof!", $.notate(newWob), "was created."]);
				return true;
			} else
				return false;
		}
	},
	$sayinto: {
		code: function(into, what) {
			for (var o in into.contents) {
				if (o.$hear)
					o.$hear(what);
			}
		}
	},
	look: {
		sigs: [ "look none at self", "look self" ],
		code: function(target) {
			if (!$player.$hear)
				return;

			if (!target)
				target = this;

			let descLine = [target.desc];
			if (target.image)
				descLine.push($.notate(target.name, target, "image"));

			$player.$hear([$.notate(target)]);
			$player.$hear(descLine);
			$player.$hear([]);

			var contents = target.contents;
			if (contents.length) {
				var exits = [];
				var others = [];
				var players = [];
				var arr = null; // Reference to target array

				map(contents, function(wob) {
					if (wob instanceof @player) {
						arr = players;
					}
					else if (wob instanceof @exit) {
						arr = exits;
					}
					else {
						arr = others;
					}
					arr.push($.notate(wob));
				});

				var contentsLists = [
					{
						arr: players,
						label: "Players: "
					},
					{
						arr: exits,
						label: "Exits: "
					},
					{
						arr: others,
						label: "Also here: "
					}
				]
				for (var i = 0; i < contentsLists.length; i++) {
					arr = contentsLists[i].arr;
					if (arr.length) {
						arr.sort();
						for (var j = arr.length - 1; j > 0; j--) {
							arr.splice(j, 0, ", ");
						}
						arr.unshift(contentsLists[i].label);
						$player.$hear(arr);
					}
				}
d			}
		}
	},
	teleport: {
		sigs: [ "teleport self", "teleport none at self" ],
		code: function() {
			$player.$hear(["Poof! You teleported into ", $.notate(this)]);
			$.move($player, this);
			this.look();
		}
	}
};
