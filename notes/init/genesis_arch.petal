var verbs = {
	go: {
		sigs: [ "go self", "go none in self", "go none at self", "go none through self" ],
		code: function() {
			let checks = [ [-1, 0], [1, 0], [0, -1], [0, 1] ];
			let checkNames = [ "West", "East", "North", "South" ];
			let checkOpposites = [ "East", "West", "South", "North" ];

			function rand(min, max) {
				return Math.floor(Math.random() * (max - min)) + min;
			}

			function maze(xsize, ysize, punchpct) {
				let grid = [];
				for (let y=0; y<ysize; ++y) {
					let r = [];
					grid.push(r);
					for (let x=0; x<xsize; ++x)
						r.push("#");
				}

				function next(curx, cury, first) {
					// Unblock the current space.
					if (first)
						grid[cury][curx] = "+";
					else
						grid[cury][curx] = " ";

					// Pick a random direction that is not:
					// - Outside the map
					// - Behind an already opened wall.
					let dir = rand(0, 4);
					let dirarr = [];
					for (let i=0; i<4; ++i) {
						dirarr.push(dir);
						dir = (dir + 1) % 4;
					}
					for (let d of dirarr) {
						let vx = 0, vy = 0;
						switch (d) {
							case 0: // up
								vy = -1;
								break;
							case 1: // right
								vx = 1;
								break;
							case 2: // down
								vy = 1;
								break;
							case 3: // left
								vx = -1;
								break;
						}

						// Do the coordinates meet the requirements?
						let nx = curx + vx, ny = cury + vy;
						if (nx < 1 || ny < 1 || nx >= (xsize-1) || ny >= (ysize-1)) {
							if (nx === 0 || ny === 0 || nx === (xsize-1) || ny === (ysize-1)) {
								let makeExit = rand(0, 100);
								if (makeExit < 30) {
									// Look for nearby exits and don't put two next to each other.
									let skipExit = false;
									for (let check of checks) {
										let cx = nx + check[0];
										let cy = ny + check[1];
										if (cx >= 0 && cy >= 0 && cx <= (xsize-1) && cy <= (ysize-1))
											if (grid[cy][cx] === "+")
												skipExit = true;
									}
									if (!skipExit)
										grid[ny][nx] = "+";
								}
							}
							continue;
						}
						if (grid[ny][nx] === " ")
							continue;
						let borked = false;
						if (rand(0, 100) >= punchpct) {
							for (let check of checks) {
								let px = check[0];
								let py = check[1];
								if ( !((ny+py) === cury && (nx+px) === curx) && grid[ny+py][nx+px] === " ")
									borked = true;
							}
						}

						if (!borked)
							next(nx, ny);
					}
				}

				let x1 = 3;
				let y1 = 0;
				next(x1, y1, true);

				return grid;
			}

			function convertToRooms(grid) {
				const roomTypeExit = 0;
				let xsize = grid[0].length;
				let ysize = grid.length;

				/*
				class Room {
					constructor(roomType: number) {
						this.type = roomType;
						this.exits = [];
					}
					public type: number;
					public exits: number[][];
				}
				*/

				let rooms /*: Room[][]*/ = [];

				for (let y=0; y<ysize; ++y) {
					let roomRow /*: Room[]*/ = [];
					for (let x=0; x<xsize; ++x) {
						if (grid[y][x] === " ") {
							let room = { type: rand(1, 10), exits: [] };
							roomRow.push(room);
						} else if (grid[y][x] === "+") {
							let room = { type: 0, exits: [] };
							roomRow.push(room);
						} else {
							roomRow.push(null);
						}
					}
					rooms.push(roomRow);
				}

				function coordIn(coord /*: number[]*/, arr /*: number[][]*/) /*: boolean*/ {
					for (let c of arr) {
						if (c[0] === coord[0] && c[1] === coord[1])
							return true;
					}
					return false;
				}

				for (let y=0; y<ysize; ++y) {
					for (let x=0; x<xsize; ++x) {
						let room = rooms[y][x];
						if (room === null)
							continue;
						for (let i=0; i<checks.length; ++i) {
							let check = checks[i];
							let nx = x + check[0], ny = y + check[1];
							if (nx < 0 || ny < 0 || nx >= xsize || ny >= ysize)
								continue;
							if (rooms[ny][nx] === null)
								continue;
							if (grid[ny][nx] !== " ")
								continue;

							if (coordIn([nx, ny], room.exits))
								continue;

							room.exits.push([nx, ny, checkNames[i]]);
							let otherRoom = rooms[ny][nx];
							otherRoom.exits.push([x, y, checkOpposites[i]]);
						}
					}
				}

				return rooms;
			}

			function fillRooms(rooms) {
				// Forest biome
				let descs = [
					{ type: 1, prob: 15, desc: "You're on a forest path. Dense oak, maple, and other deciduous trees surround you in every direction, though you can see a little of what's under them." },
					{ type: 1, prob: 15, desc: "You're on a forest path. You can hear the wind sighing through the leaves of the canopy above you as they swish around." },
					{ type: 1, prob: 15, desc: "You're on a forest path. A buzzing sound nearby reminds you that the industriousness of insects never stops." },
					{ type: 1, prob: 15, desc: "You're on a forest path. Firm and yet springy dirt clings lightly as you walk along under the branches." },
					{ type: 1, prob: 15, desc: "You're on a forest path. Rocks stick up out of the ground, making this part a little treacherous, but it's passable." },
					{ type: 1, prob: 15, desc: "You're in a clearing within a forest path. This space is filled with waist-high grasses, and is vaguely circular shaped." },
					{ type: 2, prob: 8, desc: "You're on a forest path. A little stone bridge crosses over a stream as it burbles along." },
					{ type: 2, prob: 8, desc: "You're on a forest path. A log has fallen across a small stream here, giving you a place to cross. It appears as though the log has been flattened on top to make passage easier." },
					{ type: 3, prob: 3, desc: "You're on a forest path. Sometimes it feels like something is watching you from under the trees, but you can never see anything when you turn around quickly." },
					{ type: 3, prob: 2, desc: "You're in a clearing within a forest path. A small wooden hut is here, and it looks like it has seen better days." }
				];
				function pickRoom() {
					// while (true) {
					for (let i=0; i<100; ++i) {
						for (let d of descs) {
							let v = rand(0, 100);
							if (v < d.prob)
								return d;
						}
					}

					return descs[0];
				}

				let xsize = rooms[0].length;
				let ysize = rooms.length;
				let out = [];
				for (let y=0; y<ysize; ++y) {
					for (let x=0; x<xsize; ++x) {
						let room = rooms[y][x];
						if (room === null)
							continue;

						let desc = pickRoom();
						let descType = desc.type;
						let descText = desc.desc;
						if (room.type === roomTypeExit) {
							descType = roomTypeExit;
							descText = "Exit the zone";
						}
						out.push({
							id: y*xsize+x,
							desc: descText,
							type: descType,
							exit: room.type === roomTypeExit,
							exits: map(room.exits, e => [e[1] * xsize + e[0], e[2]])
						});
						// console.log(x,y,room.id, "exits", room.exits.map(e => rooms[e[1]][e[0]].id + " ("+(e[0])+", "+e[1]+")").join(','));
					}
				}

				return out;
			}

			function printGrid(grid) {
				let xsize = grid[0].length;
				let ysize = grid.length;
				for (let y=0; y<ysize; ++y) {
					let o = "";
					for (let x=0; x<xsize; ++x) {
						o += grid[y][x];
					}
					$player.$debug([o]);
				}
			}

			function printRooms(rooms) {
				for (let yrow of rooms) {
					for (let x of yrow) {
						if (x) {
							$player.$debug(["Type: ", x.type, ", Exits: ", x.exits.join(", ")]);
						}
					}
				}
			}

			function printOut(out) {
				for (let r of out) {
					$player.$debug(["id ", r.id, ", desc ", r.desc, ", exits ", r.exits.join("|")]);
				}
			}

			function generateRooms(out) {
				// Make a container wob for all the sub-wobs.
				let container = $.create(1);
				if (!@genesis_arch.counter)
					@genesis_arch.counter = 1;
				let containerName = "Genesis Zone " + @genesis_arch.counter;
				container.name = containerName;
				container.desc = "Here there be creation; forest biome";

				let count = 1;
				// First, generate all the rooms.
				for (let r of out) {
					let wob = $.create(container.id);
					// $player.$hear(["Generated room ", r.id, " as #", wob.id]);

					wob.name = "Forest Path";
					wob.desc = r.desc;
					wob.base = @room;

					r.wobid = wob.id;

					++count;
				}

				// Next, make all of the exits. We first have to make an array of all the
				// rooms so we can map to the room array IDs (which is what is being used by
				// the generator above).
				let roomsObj = [];
				for (let r of out) {
					roomsObj[r.id] = r;
				}

				for (let r of out) {
					for (let e of r.exits) {
						let exit = $.create(r.wobid);
						// $player.$debug(["Generated exit ", exit.id, " from ", r.wobid, " to ", roomsObj[e].wobid]);

						exit.name = e[1];
						exit.desc = "Along the forest path...";
						exit.base = @exit;
						exit.target = roomsObj[e[0]].wobid;
					}
				}

				$player.$debug(["Genesis complete."]);
			}

			var grid = maze(12, 12, 5);
			$player.$debug(["maze grid:"]);
			printGrid(grid);
			var rooms = convertToRooms(grid);
			// $player.$debug(["room grid:"]);
			// printRooms(rooms);
			var out = fillRooms(rooms);
			// $player.$debug(["final construct:"]);
			// printOut(out);
			generateRooms(out);

			// The last thing we need to do is turn ourselves into a regular exit.
			this.base = @exit;
			this.target = out[0].wobid;

			// And move the user to the first room.
			this.base.go(this.target);
		}
	}
};
